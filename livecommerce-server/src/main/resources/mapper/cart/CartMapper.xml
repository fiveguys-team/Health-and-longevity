<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.example.livecommerce_server.cart.mapper.CartMapper">

    <select id="selectCartByUserId"
            parameterType="int"
            resultType="com.example.livecommerce_server.cart.dto.CartDTO">
        SELECT cart_id, created_at, user_id
        FROM cart_m
        WHERE user_id = #{userId}
    </select>

    <insert id="insertCart"
            parameterType="com.example.livecommerce_server.cart.dto.CartDTO">
        INSERT INTO cart_m (cart_id, created_at, user_id)
        VALUES (#{cartId}, #{createdAt}, #{userId})
    </insert>

    <insert id="insertCartItem" parameterType="com.example.livecommerce_server.cart.dto.CartItemDTO">
        INSERT INTO cart_item_d (
            cart_item_id,
            cart_id,
            product_id,
            quantity,
            created_at
        ) VALUES (
                     #{cartItemId},
                     #{cartId},
                     #{productId},
                     #{quantity},
                     #{createdAt}
                 )
    </insert>

    <update id="updateCartItemQuantity" parameterType="com.example.livecommerce_server.cart.dto.CartItemDTO">
        UPDATE cart_item_d
        SET quantity = #{quantity}
        WHERE cart_item_id = #{cartItemId}
    </update>

    <delete id="deleteCartItemById" parameterType="string">
        DELETE FROM cart_item_d
        WHERE cart_item_id = #{cartItemId}
    </delete>

    <delete id="deleteCartItemsByIds" parameterType="list">
        DELETE FROM cart_item_d
        WHERE cart_item_id IN
        <foreach collection="list" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
    </delete>

    <select id="selectCartItemsByCartId"
            parameterType="string"
            resultType="com.example.livecommerce_server.cart.dto.CartItemDetailDTO">
        SELECT
            ci.cart_item_id,
            ci.product_id,
            ci.quantity,
            p.name AS product_name,
            p.price,
            p.stock_count,
            COALESCE(lp.discountRate, 0) AS discount_rate,
            CASE
                WHEN lm.status_cd = 'ON' THEN COALESCE(lp.discountRate, 0)
                ELSE 0
                END AS applied_discount_rate,
            ROUND(p.price * (1 - (CASE
                                      WHEN lm.status_cd = 'ON' THEN COALESCE(lp.discountRate, 0)
                                      ELSE 0
                END) / 100)) AS discounted_price
        FROM
            cart_item_d ci
                JOIN
            product p ON ci.product_id = p.product_id
                LEFT JOIN
            live_product_j lp ON ci.product_id = lp.product_id
                LEFT JOIN
            live_m lm ON lp.live_id = lm.live_id
        WHERE
            ci.cart_id = #{cartId}
    </select>

    <select id="existsCartItemByCartIdAndProductId"
            parameterType="map"
            resultType="int">
        SELECT COUNT(*)
        FROM cart_item_d
        WHERE cart_id = #{cartId}
          AND product_id = #{productId}
    </select>

    <update id="incrementCartItemQuantity"
            parameterType="map">
        UPDATE cart_item_d
        SET quantity = quantity + #{quantity}
        WHERE cart_id = #{cartId}
          AND product_id = #{productId}
    </update>
</mapper>