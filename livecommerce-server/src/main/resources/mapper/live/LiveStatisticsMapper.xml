<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.livecommerce_server.live.mapper.LiveStatisticsMapper">

<!--    시청자 입장 기록 저장-->
    <insert id="insertViewerJoin" parameterType="LiveViewerStatsDTO">
		INSERT INTO LIVE_VIEWER_LOG (live_id, user_id, join_at, is_anonymous)
		VALUES (#{liveId},#{userId},#{joinAt},#{isAnonymous})
	</insert>

<!--    시청자 퇴장 기록 저장-->
    <update id="updateViewerLeave">
        UPDATE LIVE_VIEWER_LOG SET leave_at = #{leaveAt}
        WHERE live_id = #{liveId} AND user_id = #{userId} AND leave_at IS NULL
    </update>

<!--    현재 시청자 수 조회-->
    <select id="selectCurrentViewerCount" resultType="Integer">
        SELECT COUNT(DISTINCT (user_id)) FROM LIVE_VIEWER_LOG
        WHERE live_id = #{liveId} AND leave_at IS NULL
    </select>


<!--	라이브 방송 통계 대시보드 저장-->
    <insert id="insertLiveDashboard" parameterType="LiveStatisticsVO">
        INSERT INTO LIVE_DASHBOARD_D (liveDashboard_id, live_id ,total_viewers ,max_concurrent_viewers ,average_watch_duration ,purchase_ratio, total_orders, total_reve)
        VALUES (#{liveDashboardId}, #{liveId}, #{totalViewers}, #{maxConcurrentViewers}, #{averageWatchDuration}, #{purchaseRatio}, #{totalOrders}, #{totalReve})
    </insert>

<!--	총 시청자 수 조회-->
    <select id="selectTotalViewers" resultType="Integer" parameterType="string">
        SELECT COUNT(DISTINCT user_id) FROM LIVE_VIEWER_LOG WHERE live_id = #{liveId}
    </select>

<!--	최대 동시 시청자 수 조회-->
    <select id="selectMaxConcurrentViewers" resultType="Integer" parameterType="string">
		SELECT IFNULL(MAX(current_count), 0) AS max_concurrent_viewers
		FROM (SELECT SUM(delta) OVER (
              ORDER BY ts
              ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW
            ) AS current_count
			  FROM (
					   -- 입장 이벤트
					   SELECT join_at AS ts, 1 AS delta
					   FROM live_viewer_log
					   WHERE live_id = #{liveId}

					   UNION ALL

					   -- 퇴장 이벤트 (퇴장 시간이 있는 경우만)
					   SELECT leave_at AS ts, -1 AS delta
					   FROM live_viewer_log
					   WHERE live_id = #{liveId}
						 AND leave_at IS NOT NULL) AS events) AS timeline
	</select>

<!--	평균 시청 시간 조회 (초 단위)-->
	<select id="selectAverageWatchDuration" resultType="Integer" parameterType="string">
        SELECT IFNULL(AVG(TIMESTAMPDIFF(SECOND, join_at, leave_at)), 0) FROM LIVE_VIEWER_LOG
        WHERE live_id = #{liveId} AND leave_at IS NOT NULL
    </select>

<!--	입점업체의 통계 리스트 조회-->
	<select id="selectLiveStatisticsList" resultType="LiveStatisticsDTO" parameterType="string">
		SELECT liveDashboard_id, D.live_id, M.title, M.start_at as streamDate, total_viewers, max_concurrent_viewers, average_watch_duration, purchase_ratio, total_orders, total_reve
		FROM LIVE_DASHBOARD_D D, LIVE_M M WHERE D.live_id = M.live_id AND M.vendor_id = #{vendorId}
	</select>

<!--	총 매출액 조회-->
	<select id="selectTotalRevenue" resultType="Integer" parameterType="string">

		SELECT COALESCE(SUM(m.total_amount), 0)
		from payment_d p, live_m l, live_product_j j, product pr, order_item_d o, orders_m m, payment_d
		where l.live_id = #{liveId} and l.live_id = j.live_id and j.product_id = pr.product_id and o.product_id = pr.product_id
		    and m.order_id = o.order_id and p.payments_id = m.payments_id
		    and p.paid_at between l.start_at and l.end_cd and p.payment_status_code = 'DONE'

	</select>

<!--	주문 건 수 -->
	<select id="selectTotalOrders" resultType="Integer" parameterType="string">
		SELECT COUNT(DISTINCT o.order_id) as total_order_count
		FROM live_m l,live_product_j j, product p, order_item_d oi,orders_m o
		WHERE l.live_id = #{liveId} and l.live_id = j.live_id
		  and j.product_id = p.product_id and p.product_id = oi.product_id
		  and oi.order_id = o.order_id and o.order_date between l.start_at and l.end_cd;
	</select>

<!--	구매 전환율-->
	<select id="selectPurchaseRatio" resultType="Integer" parameterType="string">
		SELECT IFNULL(ROUND((COUNT(DISTINCT o.user_id) / COUNT(DISTINCT lvl.user_id)) * 100, 2), 0) as conversion_rate
		FROM LIVE_M l, LIVE_VIEWER_LOG lvl, ORDERS_M o
		WHERE  l.live_id = #{liveId} and  l.live_id = lvl.live_id
		  and o.order_date between l.start_at and l.end_cd
		  and lvl.is_anonymous = FALSE;
	</select>
</mapper> 